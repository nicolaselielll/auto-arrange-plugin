{"version":3,"file":"rete-auto-arrange-plugin.esm.js","sources":["src/appliers/applier.ts","src/appliers/list/standard.ts","src/appliers/list/transition/animation.ts","src/appliers/list/transition/index.ts","src/presets/classic/index.ts","src/presets/index.ts","src/index.ts"],"sourcesContent":["import { ElkNode } from 'elkjs'\nimport { NodeEditor } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ExpectedSchemes } from '../types'\n\nexport abstract class Applier<S extends ExpectedSchemes, K> {\n  editor!: NodeEditor<S>\n  area!: BaseAreaPlugin<S, K>\n\n  setEditor(editor: NodeEditor<S>) {\n    this.editor = editor\n  }\n\n  setArea(area: BaseAreaPlugin<S, K>) {\n    this.area = area\n  }\n\n  public abstract apply(nodes: ElkNode[]): Promise<void>\n}\n","import { ElkNode, ElkShape } from 'elkjs'\nimport { NodeId } from 'rete'\n\nimport { ExpectedSchemes } from '../../types'\nimport { Applier } from '../applier'\n\n/**\n * Standard applier. Applies the layout to the nodes and their children immediately\n */\nexport class StandardApplier<S extends ExpectedSchemes, K> extends Applier<S, K> {\n  protected getValidShapes<Shape extends ElkShape>(shapes: Shape[]): (Shape & Required<ElkShape>)[] {\n    return shapes.filter((shape): shape is Shape & Required<ElkShape> => {\n      const { x, y, width, height } = shape\n\n      return ![typeof x, typeof y, typeof width, typeof height].includes('undefined')\n    })\n  }\n  protected async resizeNode(id: NodeId, width: number, height: number): Promise<void | boolean> {\n    return await this.area.resize(id, width, height)\n  }\n  protected async translateNode(id: NodeId, x: number, y: number): Promise<void | boolean> {\n    const view = this.area.nodeViews.get(id)\n\n    if (view) {\n      await view.translate(x, y)\n    }\n  }\n\n  public async apply(nodes: ElkNode[], offset = { x: 0, y: 0 }) {\n    const correctNodes = this.getValidShapes(nodes)\n\n    await Promise.all(correctNodes.map(async ({ id, x, y, width, height, children }) => {\n      await Promise.all([\n        this.resizeNode(id, width, height),\n        this.translateNode(id, offset.x + x, offset.y + y)\n      ])\n\n      if (children) {\n        await this.apply(children, { x: offset.x + x, y: offset.y + y })\n      }\n    }))\n  }\n}\n","\ntype AnimationRecord = {\n  startTime: number\n  duration: number\n  cb: (t: number) => void\n  done: (success: boolean) => void\n}\n\nexport class AnimationSystem {\n  activeAnimations = new Map<string, AnimationRecord>()\n  frameId?: number\n\n  start() {\n    const entries = Array.from(this.activeAnimations.entries())\n\n    entries.forEach(([key, { startTime, duration, cb, done }]) => {\n      let t = (Date.now() - startTime) / duration\n\n      if (t >= 1) t = 1\n\n      if (t < 0 || t >= 1) {\n        this.activeAnimations.delete(key)\n        if (t >= 1) {\n          cb(1)\n          done(true)\n        }\n        return\n      }\n      cb(t)\n    })\n    this.frameId = requestAnimationFrame(() => {\n      this.start()\n    })\n  }\n\n  async add<R>(duration: number, id: string, tick: (t: number) => Promise<R>) {\n    const startTime = Date.now()\n\n    return new Promise<boolean>(done => {\n      this.activeAnimations.set(id, { startTime, duration, cb: t => void tick(t), done })\n    })\n  }\n\n  cancel(key: string) {\n    this.activeAnimations.get(key)?.done(false)\n    this.activeAnimations.delete(key)\n  }\n\n  stop() {\n    if (typeof this.frameId !== 'undefined') cancelAnimationFrame(this.frameId)\n  }\n}\n","import { ElkNode } from 'elkjs'\nimport { NodeId } from 'rete'\n\nimport { ExpectedSchemes } from '../../../types'\nimport { StandardApplier } from '../standard'\nimport { AnimationSystem } from './animation'\n\n/**\n * Transition applier props\n */\nexport type Props = {\n  /** Transition duration */\n  duration?: number\n  /** Transition timing function. Default is linear */\n  timingFunction?: (t: number) => number\n  /** Callback for each tick (frame) of the transition */\n  onTick?: (t: number) => void\n  /** Callback specifying whether the node needs to be laid out */\n  needsLayout?: (id: NodeId) => boolean\n}\n\n/**\n * Transition applier. Applies the layout to the nodes and their children with transition\n */\nexport class TransitionApplier<S extends ExpectedSchemes, K> extends StandardApplier<S, K> {\n  duration: number\n  timingFunction: (t: number) => number\n  animation = new AnimationSystem()\n\n  /**\n   * @param props Transition applier props\n   */\n  constructor(private props?: Props) {\n    super()\n    this.duration = typeof props?.duration !== 'undefined'\n      ? props.duration\n      : 2000\n    this.timingFunction = typeof props?.timingFunction !== 'undefined'\n      ? props.timingFunction\n      : t => t\n\n    this.animation.start()\n  }\n\n  protected applyTiming(from: number, to: number, t: number) {\n    const k = this.timingFunction(t)\n\n    return from * (1 - k) + to * k\n  }\n\n  protected async resizeNode(id: NodeId, width: number, height: number) {\n    const node = this.editor.getNode(id)\n\n    if (!node) return false\n    const previous = { width: node.width, height: node.height }\n\n    return await this.animation.add(this.duration, `${id}_resize`, t => {\n      const currentWidth = this.applyTiming(previous.width, width, t)\n      const currentHeight = this.applyTiming(previous.height, height, t)\n\n      if (this.props?.onTick) {\n        this.props.onTick(t)\n      }\n      return super.resizeNode(id, currentWidth, currentHeight)\n    })\n  }\n\n  protected async translateNode(id: NodeId, x: number, y: number) {\n    const view = this.area.nodeViews.get(id)\n\n    if (!view) return false\n    const previous = { ...view.position }\n\n    return await this.animation.add(this.duration, `${id}_translate`, t => {\n      const currentX = this.applyTiming(previous.x, x, t)\n      const currentY = this.applyTiming(previous.y, y, t)\n\n      if (this.props?.onTick) {\n        this.props.onTick(t)\n      }\n      return super.translateNode(id, currentX, currentY)\n    })\n  }\n\n  public cancel(id: NodeId) {\n    this.animation.cancel(`${id}_resize`)\n    this.animation.cancel(`${id}_translate`)\n  }\n\n  public async apply(nodes: ElkNode[], offset = { x: 0, y: 0 }) {\n    const correctNodes = this.getValidShapes(nodes)\n\n    await Promise.all(correctNodes.map(({ id, x, y, width, height, children }) => {\n      const hasChilden = children?.length\n      const needsLayout = this.props?.needsLayout\n        ? this.props.needsLayout(id)\n        : true\n      const forceSelf = !hasChilden || needsLayout\n\n      return Promise.all([\n        hasChilden && this.apply(children, { x: offset.x + x, y: offset.y + y }),\n        forceSelf && this.resizeNode(id, width, height),\n        forceSelf && this.translateNode(id, offset.x + x, offset.y + y)\n      ])\n    }))\n  }\n\n  public destroy() {\n    this.animation.stop()\n  }\n}\n","import { PortData, Preset } from '../types'\n\nexport const setup = (props?: { spacing?: number, top?: number, bottom?: number, x?: number }): Preset => {\n  return () => ({\n    port(data): PortData {\n      const { spacing, top, bottom, x } = {\n        spacing: typeof props?.spacing !== 'undefined' ? props.spacing : 35,\n        top: typeof props?.top !== 'undefined' ? props.top : 35,\n        bottom: typeof props?.bottom !== 'undefined' ? props.bottom : 15,\n        x: typeof props?.x !== 'undefined' ? props.x : 0 // Default value for x\n      };\n\n      if (data.side === 'output') {\n        return {\n          x: x, // Use the destructured x directly\n          y: top + data.index * spacing,\n          width: 15,\n          height: 15,\n          side: 'EAST'\n        };\n      }\n      return {\n        x: -x, // Use the destructured x directly\n        y: data.height - bottom - data.ports * spacing + data.index * spacing,\n        width: 15,\n        height: 15,\n        side: 'WEST'\n      };\n    }\n  });\n};\n","/**\n * Built-in presets. Responsible for node port positioning.\n * @module\n */\nexport * as classic from './classic'\nexport * from './types'\n","import ELK, { ElkNode, ElkPort, LayoutOptions } from 'elkjs'\nimport { NodeEditor, NodeId, Root, Scope } from 'rete'\nimport { BaseArea, BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { Applier, StandardApplier } from './appliers'\nimport { Preset } from './presets/types'\nimport { ExpectedSchemes } from './types'\n\nexport type { Preset }\nexport * as ArrangeAppliers from './appliers'\nexport * as Presets from './presets'\nexport * from './types'\n\ntype Context<S extends ExpectedSchemes> = {\n  nodes: S['Node'][]\n  connections: S['Connection'][]\n}\n\n/**\n * Auto arrange plugin. Layouts the graph using `elk.js`\n * @priority 10\n */\nexport class AutoArrangePlugin<Schemes extends ExpectedSchemes, T = never> extends Scope<never, [BaseArea<Schemes> | T, Root<Schemes>]> {\n  elk = new ELK()\n  demonstration = 'https://rtsys.informatik.uni-kiel.de/elklive/json.html'\n  presets: Preset[] = []\n\n  constructor() {\n    super('auto-arrange')\n  }\n\n  /**\n   * Adds a preset to the plugin, which will be used to layout the node ports and customize the layout options\n   * @param preset Preset to add\n   */\n  public addPreset(preset: Preset) {\n    this.presets.push(preset)\n  }\n\n  private findPreset(nodeId: string) {\n    for (const presetFactory of this.presets) {\n      const result = presetFactory(nodeId)\n\n      if (result) return result\n    }\n    throw new Error('cannot find preset for node with id = ' + nodeId)\n  }\n\n  private getArea() {\n    return this.parentScope<BaseAreaPlugin<Schemes, T>>(BaseAreaPlugin)\n  }\n\n  private getEditor() {\n    return this.getArea().parentScope<NodeEditor<Schemes>>(NodeEditor)\n  }\n\n  private nodeToLayoutChild(node: Schemes['Node'], context: Context<Schemes>): ElkNode {\n    const { id, width, height } = node\n    const inputs = node.inputs\n      ? Object.entries(node.inputs).map(([key, input]) => ({\n        key,\n        input\n      }))\n      : []\n    const outputs = node.outputs\n      ? Object.entries(node.outputs).map(([key, output]) => ({\n        key,\n        output\n      }))\n      : []\n    const preset = this.findPreset(id)\n\n    return {\n      id,\n      width,\n      height,\n      labels: [\n        {\n          text: 'label' in node\n            ? node.label\n            : ''\n        }\n      ],\n      ...this.graphToElk(context, id),\n      ports: [\n        ...inputs\n          .sort((a, b) => (a.input?.index ?? 0) - (b.input?.index ?? 0))\n          .map(({ key }, index) => {\n            const { side, width: portWidth, height: portHeight, x, y } = preset.port({\n              nodeId: id,\n              key,\n              side: 'input',\n              width,\n              height,\n              index,\n              ports: inputs.length\n            })\n\n            return {\n              id: this.getPortId(id, key, 'input'),\n              width: portWidth,\n              height: portHeight,\n              x,\n              y,\n              properties: {\n                side\n              }\n            } as ElkPort\n          }),\n        ...outputs\n          .sort((a, b) => (a.output?.index ?? 0) - (b.output?.index ?? 0))\n          .map(({ key }, index) => {\n            const { side, width: portWidth, height: portHeight, x, y } = preset.port({\n              nodeId: id,\n              side: 'output',\n              key,\n              index,\n              width,\n              height,\n              ports: outputs.length\n            })\n\n            return {\n              id: this.getPortId(id, key, 'output'),\n              width: portWidth,\n              height: portHeight,\n              x,\n              y,\n              properties: {\n                side\n              }\n            } as ElkPort\n          })\n      ],\n      layoutOptions: {\n        ...preset.options?.(id) || {},\n\n        portConstraints: 'FIXED_POS'\n      }\n    } as ElkNode\n  }\n\n  private connectionToLayoutEdge(connection: Schemes['Connection']) {\n    const source = connection.sourceOutput\n      ? this.getPortId(connection.source, connection.sourceOutput, 'output')\n      : connection.source\n    const target = connection.targetInput\n      ? this.getPortId(connection.target, connection.targetInput, 'input')\n      : connection.target\n\n    return {\n      id: connection.id,\n      sources: [source],\n      targets: [target]\n    }\n  }\n\n  private graphToElk(context: Context<Schemes>, parent?: NodeId): Pick<ElkNode, 'children' | 'edges'> {\n    const nodes = context.nodes.filter(n => n.parent === parent)\n\n    return {\n      children: nodes\n        .map(n => this.nodeToLayoutChild(n, context)),\n      edges: context.connections\n        .filter(() => !parent)\n        .map(c => this.connectionToLayoutEdge(c))\n    }\n  }\n\n  private getPortId(id: NodeId, key: string, side: 'input' | 'output') {\n    return [id, key, side].join('_')\n  }\n\n  /**\n   * Method to layout the graph\n   * @param props Options for the layout\n   * @param props.options elk.js options for the layout\n   * @param props.applier Layout applier. Responsible for applying node positions to the graph\n   * @returns Debug information about the layout\n   */\n  // eslint-disable-next-line max-statements, complexity\n  async layout(props?: { options?: LayoutOptions, applier?: Applier<Schemes, T> } & Partial<Context<Schemes>>) {\n    const nodes = props?.nodes ?? this.getEditor().getNodes()\n    const connections = props?.connections ?? this.getEditor().getConnections()\n    const graph: ElkNode = {\n      id: 'root',\n      layoutOptions: {\n        /* eslint-disable @typescript-eslint/naming-convention */\n        'elk.algorithm': 'layered',\n        'elk.hierarchyHandling': 'INCLUDE_CHILDREN',\n        'elk.edgeRouting': 'POLYLINE',\n        ...props?.options ?? {} as LayoutOptions\n        /* eslint-enable @typescript-eslint/naming-convention */\n      },\n      ...this.graphToElk({ nodes, connections })\n    }\n    const applier = props?.applier ?? new StandardApplier()\n    const source = JSON.stringify(graph, null, '\\t')\n\n    applier.setEditor(this.getEditor())\n    applier.setArea(this.getArea())\n\n    try {\n      const result = await this.elk.layout(graph)\n\n      if (result.children) {\n        await applier.apply(result.children)\n      }\n\n      return {\n        demonstration: this.demonstration,\n        source,\n        result\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn('[rete-auto-arrange-plugin]', {\n        source,\n        demonstration: this.demonstration\n      })\n      throw error\n    }\n  }\n}\n"],"names":["Applier","_classCallCheck","_createClass","key","value","setEditor","editor","setArea","area","StandardApplier","_Applier","_callSuper","arguments","_inherits","getValidShapes","shapes","filter","shape","x","y","width","height","_typeof","includes","_resizeNode","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_callee$","_context","prev","next","resize","abrupt","sent","stop","resizeNode","_x","_x2","_x3","apply","_translateNode","_callee2","view","_callee2$","_context2","nodeViews","get","translate","translateNode","_x4","_x5","_x6","_apply","_callee4","nodes","_this","offset","correctNodes","_args4","_callee4$","_context4","length","undefined","Promise","all","map","_ref2","_callee3","_ref","children","_callee3$","_context3","_x8","_x7","AnimationSystem","_defineProperty","Map","start","entries","Array","from","activeAnimations","forEach","_slicedToArray","_ref2$","startTime","duration","cb","done","t","Date","now","frameId","requestAnimationFrame","_add","tick","_this2","set","add","cancel","_this$activeAnimation","cancelAnimationFrame","TransitionApplier","_StandardApplier","props","timingFunction","animation","applyTiming","to","k","node","previous","getNode","concat","_this2$props","currentWidth","currentHeight","onTick","_superPropGet","_this3","_objectSpread","position","_this3$props","currentX","currentY","_this4","_args3","_this4$props","hasChilden","needsLayout","forceSelf","destroy","setup","port","data","_spacing$top$bottom$x","spacing","top","bottom","side","index","ports","AutoArrangePlugin","_Scope","ELK","addPreset","preset","presets","push","findPreset","nodeId","_iterator","_createForOfIteratorHelper","_step","s","n","presetFactory","result","err","e","f","Error","getArea","parentScope","BaseAreaPlugin","getEditor","NodeEditor","nodeToLayoutChild","context","_preset$options","inputs","Object","input","outputs","_ref3","_ref4","output","labels","text","label","graphToElk","_toConsumableArray","sort","a","b","_a$input$index","_a$input","_b$input$index","_b$input","_ref5","_preset$port","portWidth","portHeight","getPortId","properties","_a$output$index","_a$output","_b$output$index","_b$output","_ref6","_preset$port2","layoutOptions","options","call","portConstraints","connectionToLayoutEdge","connection","source","sourceOutput","target","targetInput","sources","targets","parent","edges","connections","c","join","_layout","_props$nodes","_props$connections","_props$options","_props$applier","graph","applier","getNodes","getConnections","JSON","stringify","elk","layout","demonstration","t0","console","warn","Scope"],"mappings":"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"}